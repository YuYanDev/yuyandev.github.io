{"content":"---\ntitle: Nginx+FCGI编译安装+TCL/C++/shell的学习/安装调教\ndate: 2017-07-01 23:32:15\n---\n\nFCGI虽然是上个世纪的东西，但是缺了还真不行。在FCGI的编译安装方面Google都无法找到相关笔记文档。在经历了一下午的折磨后，才安装上了。我觉得应该写成笔记，帮助更多人少走弯路。\n\nFCGI存在与epel和Ubuntu等源里，因此，大多数设备都能无痛安装。\n\n但由于我的是CentOS armv7版的操作系统，不可能使用epel源，由于FCGI缺乏维护，所以在编译过程中，走了很多弯路。\n\nnginx的安装查看我的上一篇博客的nginx安装部分即可。\n\n首先我们来搞清楚一下，CGI相关的原理，如何编写相关脚本，以及使用这套组合的意义。\n\n<!--more-->\n---\n\n### CGI\n\n通用网关接口（Common Gateway Interface/CGI）是一种重要的互联网技术，可以让一个客户端，从网页浏览器向执行在网络服务器上的程序请求数据。CGI描述了服务器和请求处理程序之间传输数据的一种标准。CGI 独立于任何语言的，CGI 程序可以用任何脚本语言或者是完全独立编程语言实现，只要这个语言可以在这个系统上运行。（Wikipedia）\n所以理论上，任何可以使用终端命令行运行的程序都能通过一定改动来支援cgi。\n\n我们很少看到直接的cgi，那是因为更多的web服务器软件都使用了一种更先进的cgi技术-FastCGI。\n注意，这里是FastCGI只是作为一个扩展依赖，相当于开放了接口，是一种被动型的，并不能直接操纵。另外安装时需要加上参数编译进去。\n\n##### 安装FCGI\n\n快速通用网关接口（Fast Common Gateway Interface／FastCGI）是通用网关接口（CGI）的改进，描述了客户端和服务器程序之间传输数据的一种标准。FastCGI致力于减少Web服务器与CGI程式之间互动的开销，从而使服务器可以同时处理更多的Web请求。与为每个请求创建一个新的进程不同，FastCGI使用持续的进程来处理一连串的请求（Wikipedia）\n\n请注意，这里的FCGI不同于perl-fcgi，php-cgi，这是一套完整的fcgi能够支援各种语言的FCGI及其cgi开发工具库。其对应的epel名称为fcgi-devel。\n\n由于FCGI已经倒闭，所以你从各种博客上找到的教程叫你去官网下是不可能的。\n\n但是，github上有份镜像下来的fastcgi官网镜像，尽管里面的源代码非常混乱，编译各种warning，但是好歹有了。这个一个是方便我们编写c/cpp的cgi程序，另外一个fcgiwrap也是依赖这个工具库的\n``` bash\nyum install autoconf automake libtool\nwget https://github.com/FastCGI-Archives/FastCGI.com/raw/master/original_snapshot/fcgi-2.4.1-SNAP-0910052249.tar.gz\ntar xvfz fcgi-2.4.1-SNAP-0910052249.tar.gz\ncd fcgi-2.4.1-SNAP-0910052249\n```\n然后你需要修改`./include/fcgio.h`，在里面加入`#include <cstdio>`，这里是源代码的相关bug\n\n``` bash\n./configure --prefix=/usr/local/fcgi\nmake\nmake install\n```\n\n##### 下面的内容非常重要，一定要软链头文件和动态库。博主就是坑在这里，一直去调ldconfig，发现不能正确启用\n\n``` bash\nln -s /usr/local/fcgi/lib/libfcgi.so.0 /usr/lib/\nln -s /usr/local/fcgi/lib/libfcgi.so /usr/lib/\nln -s /usr/local/fcgi/lib/libfcgi.so.0.0.0 /usr/lib/\nln -s /usr/local/fcgi/include/*.h /usr/include/\n```\n如果你需要c++相关的编译，也需要连接libfcgi++.so相关。\n\n\n##### 安装FCGI相关扩展\n为了能支持大部分脚本，我们需要安装fcgiwrap这个库。这个库安装依赖上面的FCGI开发套件\n```\ngit clone https://github.com/gnosek/fcgiwrap.git\ncd fcgiwrap\nautoreconf -i\n./configure\nmake\nmake install\nln -s fcgiwrap /usr/local/bin/\n```\n\n为了方便 操纵fcgiwrap，我们建立fcgiwrap的管理启动脚本`nano /etc/init.d/fcgiwrap`\n``` perl\n#!/usr/bin/perl\n\nuse strict;\nuse warnings FATAL => qw( all );\n\nuse IO::Socket::UNIX;\n\nmy $bin_path = '/usr/local/bin/fcgiwrap';\nmy $socket_path = $ARGV[0] || '/tmp/cgi.sock';\nmy $num_children = $ARGV[1] || 1;\n\nclose STDIN;\n\nunlink $socket_path;\nmy $socket = IO::Socket::UNIX->new(\n    Local => $socket_path,\n    Listen => 100,\n);\n\ndie \"Cannot create socket at $socket_path: $!\\n\" unless $socket;\n\nfor (1 .. $num_children) {\n    my $pid = fork;\n    die \"Cannot fork: $!\" unless defined $pid;\n    next if $pid;\n\n    exec $bin_path;\n    die \"Failed to exec $bin_path: $!\\n\";\n}\n```\n\n##### 安装FCGI管理器\n\n在之前我们说了，nginx等软件知识被动接受FastCGI接口，所以，我们需要spawn-fcgi这个进程管理器\n```\nwget http://download.lighttpd.net/spawn-fcgi/releases-1.6.x/spawn-fcgi-1.6.4.tar.gz\ntar -zxvf spawn-fcgi-1.6.4.tar.gz\ncd spawn-fcgi-1.6.4\n./configure\nmake\nmake install\n```\n执行`spawn-fcgi --help`验证安装情况，具体如何用过会儿再讲。\n\n---\n\n### CGI程序的编写，这里有几个不同语言的示例。\n\n建议创建`/var/www/cgi/cgi-bin`目录，把写好的cgi脚本都放里面。\n另外赋予相关权限`chown -R nginx:nginx /var/www/cgi-bin`\n\n##### tcl语言\nTcl（发音tickle）是一种脚本语言。由John Ousterhout创建。TCL经常被用于快速原型开发 RAD、脚本编程、GUI编程和测试等方面。（Wikipedia）\n\n这是测试的最好一种语言了，我们创建`test-tcl.cgi`\n``` tcl\n#!/usr/bin/tclsh\n\nputs  \"Content-type: text/html\"\nputs \"\"\nputs  \"This is a tcl cgi test script\"\n```\n\n##### bash脚本\n\n我们创建`test-bash.cgi`\n``` bash\n#!/bin/bash\necho -e \"Content-type: text/html\\n\\n\";\necho \"<html>\"\necho \"<title>\"\necho -e \"cgi test\\n\"\necho \"</title>\"\necho \"<body>\"\necho -e \"<p> This is a bash cgi test script</p>\"\necho \"</body>\"\necho \"</html>\"\n```\n\n##### c语言\n\n我们创建 `test-c.cpp`\n``` c\n#include <fcgi_stdio.h>\n#include <stdlib.h>\n\nint main(void)\n{\n    int count = 0;\n    while (FCGI_Accept() >= 0)\n        printf(\"Content-type: text/html\\r\\n\"\n        \"\\r\\n\"\n        \"<title>FastCGI Hello!</title>\"\n        \"<h1>FastCGI Hello!</h1>\"\n        \"Request number %d running on host <i>%s</i>\\n\",\n        ++count, getenv(\"SERVER_NAME\"));\n    return 0;\n}\n```\n\n然后`g++ test-c.cpp -o test-c.cgi –lfcgi`来编译你的c语言的cgi程序。\n\n##### perl语言测试\n\n我们创建 `test-perl.cgi`\n``` perl\n#!/usr/bin/perl\n\nprint \"Content-type: text/html\\n\\n\";\nprint \"<html><head><title>cgi test</title></head>\\n\";\nprint \"<body><p>This is a bash cgi test script<p></body></html>\\n\";\n```\n\n---\n\n### 启动cgi工具以及nginx相关配置\n\n使用spawn-fcgi来启动fcgiwrap。\n当然，你也可以使用spawn-fcgi单独启动一个可执行的cgi程序\n``` bash\n#cgi交给fcgiwrap托管\nspawn-fcgi -f /usr/local/sbin/fcgiwrap -p 5000\n#单独启动单个cgi程序\nspawn-fcgi -a 127.0.0.1 -p 5000 -f /var/www/cgi/cgi-bin/test-c.cgi\n```\n\n在nginx的配置 比如，匹配所有cgi后缀\n``` nginx\nlocation ~ .*\\.cgi$ {\n  root /var/www/cgi/;\n  fastcgi_pass 127.0.0.1:5000;\n  fastcgi_index index.cgi;\n  include fastcgi.conf;\n}\n```\n又比如，cgi-bin文件夹交个cgi处理\n``` nginx\nlocation /cgi-bin/ {\n  root /var/www/cgi/;\n  fastcgi_pass 127.0.0.1:5000;\n  fastcgi_index index.cgi;\n  include fastcgi.conf;\n}\n```\n\n这个样更适用于c和cpp编写的cgi应用\n\n---\n<hr/>\n\n### 为什么使用这套组合。\n\n首先，这次实验的设备是armv7单片机，所以才会编译得吐血。\n尽管FastCGI开销不小，但是在单片机这样的使用的场景下，效率绝对是比nginx+mysql/sqlite+php/node.js的效率要高很多的，特别是我们使用bash或者c语言来作为cgi相应的话，效率非常高。\n另外，我们如果操作GPIO针脚，使用c语言，无论是易用性还是效率性能都要大大高于python的。\n\n但是，本套配置文件在cgi响应请求方面还是有些问题，估计是nginx配置的锅，我也会继续折腾研究的\n"}